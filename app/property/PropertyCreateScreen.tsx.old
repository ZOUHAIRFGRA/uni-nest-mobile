import React, { useState } from 'react';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useColorScheme, ScrollView, Platform } from 'react-native';
import { getTheme } from '../utils/theme';
import { VStack } from '../../components/ui/vstack';
import { Text } from '../../components/ui/text';
import { Box } from '../../components/ui/box';
import { Button, ButtonText } from '../../components/ui/button';
import { Input, InputField } from '../../components/ui/input';
import { Divider } from '../../components/ui/divider';
import { useNavigation } from '@react-navigation/native';
import { propertyService } from '../services/propertyService';
import { Spinner } from '../../components/ui/spinner';
import * as ImagePicker from 'expo-image-picker';
import { Image } from '@/components/ui/image';
import MapView, { Marker, UrlTile } from 'react-native-maps';
import * as Location from 'expo-location';
import { HStack } from '../../components/ui/hstack';

export default function PropertyCreateScreen() {
  const navigation = useNavigation<any>();
  const colorScheme = useColorScheme();
  const currentTheme = getTheme(colorScheme || 'light');

  const [form, setForm] = useState<any>({ title: '', description: '', price: '', address: '', maxTenants: '', utilitiesIncluded: false, location: '', images: [] });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [location, setLocation] = useState<{ latitude: number; longitude: number } | null>(null);
  const [mapRegion, setMapRegion] = useState<any>(null);
  const [selectingLocation, setSelectingLocation] = useState(false);
  // Add required fields
  const [distanceToUniversity, setDistanceToUniversity] = useState('');
  const [distanceToBusStop, setDistanceToBusStop] = useState('');
  const [amenities, setAmenities] = useState<{ [key: string]: boolean }>({ wifi: false, parking: false, laundry: false, gym: false, security: false, furnished: false, airConditioning: false, heating: false, kitchen: false, balcony: false });
  const [roomType, setRoomType] = useState('Private');
  const [isAvailable, setIsAvailable] = useState(true);

  React.useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') return;
      const loc = await Location.getCurrentPositionAsync({});
      setLocation({ latitude: loc.coords.latitude, longitude: loc.coords.longitude });
      setMapRegion({
        latitude: loc.coords.latitude,
        longitude: loc.coords.longitude,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      });
    })();
  }, []);

  const handleChange = (key: string, value: any) => setForm((f: any) => ({ ...f, [key]: value }));

  const pickImages = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsMultipleSelection: true,
      quality: 0.7,
    });
    if (!result.canceled && result.assets) {
      setForm((f: any) => ({ ...f, images: [...f.images, ...result.assets.map((a: any) => a.uri)] }));
    }
  };

  const handleMapPress = async (e: any) => {
    const { latitude, longitude } = e.nativeEvent.coordinate;
    setLocation({ latitude, longitude });
    // Reverse geocode to get address
    try {
      const [place] = await Location.reverseGeocodeAsync({ latitude, longitude });
      if (place) {
        const addressString = [
          place.name,
          place.street,
          place.city,
          place.region,
          place.country
        ].filter(Boolean).join(', ');
        setForm((f: any) => ({ ...f, address: addressString }));
      }
    } catch (err) {
      // Optionally handle error
    }
  };

  const handleAmenityToggle = (key: string) => setAmenities(a => ({ ...a, [key]: !a[key] }));

  const handleSubmit = async () => {
    setLoading(true);
    setError(null);
    setSuccess(false);
    try {
      if (!location) throw new Error('Please select a location on the map.');
      if (!form.images || form.images.length === 0) throw new Error('Please add at least one image.');
      // Prepare FormData
      const propertyData = new FormData();
      propertyData.append('title', form.title);
      propertyData.append('description', form.description);
      propertyData.append('price', String(form.price));
      propertyData.append('address', form.address);
      propertyData.append('maxTenants', String(form.maxTenants));
      propertyData.append('utilitiesIncluded', String(form.utilitiesIncluded));
      propertyData.append('location', JSON.stringify({ type: 'Point', coordinates: [location.longitude, location.latitude] }));
      propertyData.append('distanceToUniversity', String(distanceToUniversity));
      propertyData.append('distanceToBusStop', String(distanceToBusStop));
      propertyData.append('amenities', JSON.stringify(amenities));
      propertyData.append('roomType', roomType);
      propertyData.append('isAvailable', String(isAvailable));
      // Append images as files
      for (let i = 0; i < form.images.length; i++) {
        const uri = form.images[i];
        const filename = uri.split('/').pop();
        const match = /\.(\w+)$/.exec(filename ?? '');
        const type = match ? `image/${match[1]}` : `image`;
        propertyData.append('images', {
          uri,
          name: filename,
          type,
        } as any);
      }
      // Send with fetch (not apiClient)
      const response = await fetch(`${process.env.EXPO_PUBLIC_API_URL || 'https://trusted-frank-mudfish.ngrok-free.app'}/api/properties`, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          // Do NOT set Content-Type for FormData
        },
        body: propertyData,
      });
      const data = await response.json();
      if (!response.ok) throw new Error(data.message || 'Failed to create property');
      setSuccess(true);
      setForm({ title: '', description: '', price: '', address: '', maxTenants: '', utilitiesIncluded: false, location: '', images: [] });
      setLocation(null);
      setDistanceToUniversity('');
      setDistanceToBusStop('');
      setAmenities({ wifi: false, parking: false, laundry: false, gym: false, security: false, furnished: false, airConditioning: false, heating: false, kitchen: false, balcony: false });
      setRoomType('Private');
      setIsAvailable(true);
      navigation.navigate('PropertyDetails', { id: data._id || data.id });
    } catch (e: any) {
      setError(e.message || 'Failed to create property');
    } finally {
      setLoading(false);
    }
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: currentTheme.colors.background }}>
      <ScrollView contentContainerStyle={{ flexGrow: 1, padding: currentTheme.spacing.md }} showsVerticalScrollIndicator={false}>
        <VStack space="lg" style={{ width: '100%' }}>
          <Text size="3xl" style={{ fontWeight: '700', color: currentTheme.colors.text.primary, marginBottom: currentTheme.spacing.sm }}>
            Create Property
          </Text>
          <Divider style={{ marginVertical: currentTheme.spacing.sm }} />
          {error && (
            <Text size="md" style={{ color: currentTheme.colors.error }}>{error}</Text>
          )}
          {success && (
            <Text size="md" style={{ color: currentTheme.colors.secondary }}>Property created successfully!</Text>
          )}
          <Input style={{ backgroundColor: currentTheme.colors.input, borderRadius: currentTheme.borderRadius.input, borderColor: currentTheme.colors.border }}>
            <InputField
              value={form.title}
              onChangeText={v => handleChange('title', v)}
              placeholder="Title"
              style={{ fontFamily: currentTheme.typography.fontFamily }}
              allowFontScaling
            />
          </Input>
          <Input style={{ backgroundColor: currentTheme.colors.input, borderRadius: currentTheme.borderRadius.input, borderColor: currentTheme.colors.border }}>
            <InputField
              value={form.description}
              onChangeText={v => handleChange('description', v)}
              placeholder="Description"
              style={{ fontFamily: currentTheme.typography.fontFamily }}
              allowFontScaling
            />
          </Input>
          <Input style={{ backgroundColor: currentTheme.colors.input, borderRadius: currentTheme.borderRadius.input, borderColor: currentTheme.colors.border }}>
            <InputField
              value={form.price}
              onChangeText={v => handleChange('price', v)}
              placeholder="Price (MAD/month)"
              keyboardType="numeric"
              style={{ fontFamily: currentTheme.typography.fontFamily }}
              allowFontScaling
            />
          </Input>
          <Input style={{ backgroundColor: currentTheme.colors.input, borderRadius: currentTheme.borderRadius.input, borderColor: currentTheme.colors.border }}>
            <InputField
              value={form.maxTenants}
              onChangeText={v => handleChange('maxTenants', v)}
              placeholder="Max Tenants"
              keyboardType="numeric"
              style={{ fontFamily: currentTheme.typography.fontFamily }}
              allowFontScaling
            />
          </Input>
          <Input style={{ backgroundColor: currentTheme.colors.input, borderRadius: currentTheme.borderRadius.input, borderColor: currentTheme.colors.border }}>
            <InputField
              value={form.address}
              onChangeText={v => handleChange('address', v)}
              placeholder="Address"
              style={{ fontFamily: currentTheme.typography.fontFamily }}
              allowFontScaling
            />
          </Input>
          <Button action="secondary" onPress={() => setSelectingLocation(true)} style={{ marginBottom: currentTheme.spacing.sm }}>
            <ButtonText>Select Location on Map</ButtonText>
          </Button>
          {selectingLocation && mapRegion && (
            <Box style={{ height: 300, borderRadius: 12, overflow: 'hidden', marginBottom: 12 }}>
              <MapView
                style={{ flex: 1 }}
                initialRegion={mapRegion}
                onPress={handleMapPress}
              >
                <UrlTile urlTemplate="https://a.tile.openstreetmap.org/{z}/{x}/{y}.png" maximumZ={19} />
                {location && (
                  <Marker coordinate={location} />
                )}
              </MapView>
              <Button action="primary" onPress={() => setSelectingLocation(false)} style={{ position: 'absolute', bottom: 12, right: 12, zIndex: 10 }}>
                <ButtonText>Done</ButtonText>
              </Button>
            </Box>
          )}
          <Button action="secondary" onPress={pickImages} style={{ marginBottom: currentTheme.spacing.sm }}>
            <ButtonText>Add Images</ButtonText>
          </Button>
          <VStack space="xs">
            {form.images.map((img: string, idx: number) => (
              <Box key={idx} style={{ width: 100, height: 80, borderRadius: 8, overflow: 'hidden', backgroundColor: currentTheme.colors.card, marginBottom: 8 }}>
                <Image source={{ uri: img }} alt={`Property image ${idx + 1}`} style={{ width: '100%', height: '100%', objectFit: 'cover' }} />
              </Box>
            ))}
          </VStack>
          <Input style={{ backgroundColor: currentTheme.colors.input, borderRadius: currentTheme.borderRadius.input, borderColor: currentTheme.colors.border }}>
            <InputField
              value={distanceToUniversity}
              onChangeText={setDistanceToUniversity}
              placeholder="Distance to University (meters)"
              keyboardType="numeric"
              style={{ fontFamily: currentTheme.typography.fontFamily }}
              allowFontScaling
            />
          </Input>
          <Input style={{ backgroundColor: currentTheme.colors.input, borderRadius: currentTheme.borderRadius.input, borderColor: currentTheme.colors.border }}>
            <InputField
              value={distanceToBusStop}
              onChangeText={setDistanceToBusStop}
              placeholder="Distance to Bus Stop (meters)"
              keyboardType="numeric"
              style={{ fontFamily: currentTheme.typography.fontFamily }}
              allowFontScaling
            />
          </Input>
          <Text size="md" style={{ fontWeight: '600', marginTop: 8 }}>Amenities</Text>
          <VStack space="xs">
            {Object.keys(amenities).map(key => (
              <Box key={key} style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 4 }}>
                <Button action={amenities[key] ? 'primary' : 'secondary'} size="sm" onPress={() => handleAmenityToggle(key)} style={{ marginRight: 8 }}>
                  <ButtonText>{key.charAt(0).toUpperCase() + key.slice(1)}</ButtonText>
                </Button>
                <Text size="sm" style={{ color: currentTheme.colors.text.secondary }}>{amenities[key] ? 'Yes' : 'No'}</Text>
              </Box>
            ))}
          </VStack>
          <Text size="md" style={{ fontWeight: '600', marginTop: 8 }}>Room Type</Text>
          <HStack space="sm" style={{ marginBottom: 8 }}>
            {['Private', 'Shared', 'Studio'].map(type => (
              <Button key={type} action={roomType === type ? 'primary' : 'secondary'} size="sm" onPress={() => setRoomType(type)} style={{ marginRight: 8 }}>
                <ButtonText>{type}</ButtonText>
              </Button>
            ))}
          </HStack>
          <Text size="md" style={{ fontWeight: '600', marginTop: 8 }}>Available</Text>
          <HStack space="sm" style={{ marginBottom: 8 }}>
            <Button action={isAvailable ? 'primary' : 'secondary'} size="sm" onPress={() => setIsAvailable(true)} style={{ marginRight: 8 }}>
              <ButtonText>Yes</ButtonText>
            </Button>
            <Button action={!isAvailable ? 'primary' : 'secondary'} size="sm" onPress={() => setIsAvailable(false)}>
              <ButtonText>No</ButtonText>
            </Button>
          </HStack>
          <Button action="primary" onPress={handleSubmit} disabled={loading} style={{ marginTop: currentTheme.spacing.lg }}>
            <ButtonText>{loading ? 'Creating...' : 'Create Property'}</ButtonText>
          </Button>
        </VStack>
      </ScrollView>
    </SafeAreaView>
  );
} 