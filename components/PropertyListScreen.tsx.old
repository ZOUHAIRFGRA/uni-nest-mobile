import React, { useState } from 'react';
import { View, Text, ScrollView, TouchableOpacity } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import Animated, { FadeInUp, FadeInLeft } from 'react-native-reanimated';
import { Card } from './ui/Card';
import { Button } from './ui/Button';
import { InputField } from './ui/InputField';

// Sample property data
const sampleProperties = [
  {
    id: '1',
    title: 'Modern Studio Near Campus',
    price: '2,500 MAD/month',
    location: 'Agdal, Rabat',
    distance: '0.5 km from UM5',
    rating: 4.8,
    reviews: 24,
    imageUrl: 'https://via.placeholder.com/300x200',
    amenities: ['WiFi', 'Furnished', 'AC', 'Kitchen'],
    available: true,
  },
  {
    id: '2',
    title: 'Shared Apartment with Students',
    price: '1,800 MAD/month',
    location: 'Hassan, Rabat',
    distance: '1.2 km from UM5',
    rating: 4.6,
    reviews: 18,
    imageUrl: 'https://via.placeholder.com/300x200',
    amenities: ['WiFi', 'Laundry', 'Study Room', 'Parking'],
    available: true,
  },
  {
    id: '3',
    title: 'Cozy Room in Villa',
    price: '2,200 MAD/month',
    location: 'Hay Riad, Rabat',
    distance: '2.1 km from UM5',
    rating: 4.9,
    reviews: 31,
    imageUrl: 'https://via.placeholder.com/300x200',
    amenities: ['Garden', 'WiFi', 'Balcony', 'Security'],
    available: false,
  },
];

interface PropertyCardProps {
  property: typeof sampleProperties[0];
  index: number;
}

/**
 * Individual property card component with iOS design
 */
const PropertyCard: React.FC<PropertyCardProps> = ({ property, index }) => {
  return (
    <Animated.View entering={FadeInUp.delay(index * 100).springify()}>
      <Card variant="elevated" className="mb-4 overflow-hidden" padding="sm">
        <TouchableOpacity activeOpacity={0.8}>
          {/* Property Image */}
          <View className="relative">
            <View className="w-full h-48 bg-neutral-200 rounded-xl mb-4 overflow-hidden">
              <View className="w-full h-full bg-gradient-to-br from-primary-100 to-primary-200 items-center justify-center">
                <Text className="text-primary-600 text-xl">üè†</Text>
              </View>
            </View>
            
            {/* Availability Badge */}
            <View className={`absolute top-3 left-3 px-3 py-1 rounded-full ${
              property.available ? 'bg-success' : 'bg-error'
            }`}>
              <Text className="text-white text-sm font-medium">
                {property.available ? 'Available' : 'Occupied'}
              </Text>
            </View>

            {/* Rating Badge */}
            <View className="absolute top-3 right-3 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full flex-row items-center">
              <Text className="text-warning text-sm">‚≠ê</Text>
              <Text className="text-neutral-800 text-sm font-medium ml-1">{property.rating}</Text>
            </View>
          </View>

          {/* Property Details */}
          <View className="px-2">
            {/* Title and Price */}
            <View className="flex-row justify-between items-start mb-2">
              <Text className="text-neutral-800 text-lg font-bold flex-1 mr-2" numberOfLines={2}>
                {property.title}
              </Text>
              <Text className="text-primary-600 text-lg font-bold">
                {property.price}
              </Text>
            </View>

            {/* Location and Distance */}
            <View className="flex-row items-center mb-3">
              <Text className="text-neutral-400 text-sm">üìç</Text>
              <Text className="text-neutral-600 text-md ml-1 flex-1">{property.location}</Text>
              <Text className="text-secondary-500 text-sm font-medium">{property.distance}</Text>
            </View>

            {/* Amenities */}
            <View className="flex-row flex-wrap mb-4 gap-2">
              {property.amenities.slice(0, 3).map((amenity, idx) => (
                <View key={idx} className="bg-neutral-100 px-3 py-1 rounded-full">
                  <Text className="text-neutral-600 text-sm">{amenity}</Text>
                </View>
              ))}
              {property.amenities.length > 3 && (
                <View className="bg-primary-100 px-3 py-1 rounded-full">
                  <Text className="text-primary-600 text-sm">+{property.amenities.length - 3} more</Text>
                </View>
              )}
            </View>

            {/* Action Buttons */}
            <View className="flex-row gap-3">
              <Button
                title="View Details"
                onPress={() => console.log('View details:', property.id)}
                variant="outline"
                size="sm"
                className="flex-1"
              />
              <Button
                title={property.available ? "Contact" : "Waitlist"}
                onPress={() => console.log('Contact:', property.id)}
                variant={property.available ? "primary" : "ghost"}
                size="sm"
                className="flex-1"
              />
            </View>
          </View>
        </TouchableOpacity>
      </Card>
    </Animated.View>
  );
};

export const PropertyListScreen = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedFilter, setSelectedFilter] = useState<'all' | 'available' | 'near'>('all');

  // Filter options
  const filters = [
    { key: 'all' as const, label: 'All Properties', icon: 'üè†' },
    { key: 'available' as const, label: 'Available', icon: '‚úÖ' },
    { key: 'near' as const, label: 'Near Campus', icon: 'üìç' },
  ];

  // Handle search
  const handleSearch = (query: string) => {
    setSearchQuery(query);
    console.log('Search:', query);
  };

  // Filter properties based on selection
  const filteredProperties = sampleProperties.filter(property => {
    if (selectedFilter === 'available') return property.available;
    if (selectedFilter === 'near') return property.distance.includes('0.') || property.distance.includes('1.');
    return true;
  });

  return (
    <View className="flex-1 bg-neutral-50">
      <StatusBar style="dark" />
      
      {/* Header */}
      <Animated.View 
        entering={FadeInUp.delay(100).springify()}
        className="pt-16 pb-6 px-6 bg-white shadow-ios"
      >
        <View className="flex-row items-center justify-between mb-6">
          <View>
            <Text className="text-3xl font-bold text-neutral-800">Properties</Text>
            <Text className="text-neutral-600 text-md">{filteredProperties.length} available listings</Text>
          </View>
          
          <TouchableOpacity 
            className="w-12 h-12 bg-primary-100 rounded-2xl items-center justify-center shadow-ios"
            activeOpacity={0.8}
          >
            <Text className="text-primary-600 text-xl">‚öôÔ∏è</Text>
          </TouchableOpacity>
        </View>

        {/* Search Bar */}
        <InputField
          placeholder="Search by location, university, or amenities..."
          value={searchQuery}
          onChangeText={handleSearch}
          leftIcon={<Text className="text-neutral-400 text-lg">üîç</Text>}
          className="mb-4"
        />

        {/* Filter Tabs */}
        <ScrollView 
          horizontal 
          showsHorizontalScrollIndicator={false}
          className="flex-row gap-3"
          contentContainerStyle={{ paddingHorizontal: 2 }}
        >
          {filters.map((filter, index) => (
            <Animated.View key={filter.key} entering={FadeInLeft.delay(200 + index * 50).springify()}>
              <TouchableOpacity
                className={`px-4 py-3 rounded-2xl flex-row items-center shadow-ios ${
                  selectedFilter === filter.key 
                    ? 'bg-primary-500' 
                    : 'bg-white'
                }`}
                onPress={() => setSelectedFilter(filter.key)}
                activeOpacity={0.8}
              >
                <Text className="text-lg mr-2">{filter.icon}</Text>
                <Text className={`font-medium text-md ${
                  selectedFilter === filter.key 
                    ? 'text-white' 
                    : 'text-neutral-700'
                }`}>
                  {filter.label}
                </Text>
              </TouchableOpacity>
            </Animated.View>
          ))}
        </ScrollView>
      </Animated.View>

      {/* Properties List */}
      <ScrollView 
        className="flex-1 px-6 pt-6"
        showsVerticalScrollIndicator={false}
        contentInsetAdjustmentBehavior="automatic"
      >
        {filteredProperties.length > 0 ? (
          filteredProperties.map((property, index) => (
            <PropertyCard 
              key={property.id} 
              property={property} 
              index={index}
            />
          ))
        ) : (
          <Animated.View entering={FadeInUp.delay(300).springify()}>
            <Card variant="glass" padding="lg" className="items-center">
              <Text className="text-6xl mb-4">üîç</Text>
              <Text className="text-xl font-bold text-neutral-800 mb-2">No Properties Found</Text>
              <Text className="text-neutral-600 text-center text-md leading-relaxed">
                Try adjusting your filters or search terms to find more properties.
              </Text>
              <Button
                title="Clear Filters"
                onPress={() => {
                  setSelectedFilter('all');
                  setSearchQuery('');
                }}
                variant="outline"
                size="md"
                className="mt-4"
              />
            </Card>
          </Animated.View>
        )}

        {/* Bottom Spacer */}
        <View className="h-20" />
      </ScrollView>

      {/* Floating Action Button */}
      <Animated.View 
        entering={FadeInUp.delay(500).springify()}
        className="absolute bottom-8 right-6"
      >
        <TouchableOpacity 
          className="w-16 h-16 bg-primary-500 rounded-full items-center justify-center shadow-elevated"
          activeOpacity={0.8}
        >
          <Text className="text-white text-2xl">+</Text>
        </TouchableOpacity>
      </Animated.View>
    </View>
  );
};
