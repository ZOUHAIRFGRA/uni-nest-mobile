import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';

// Import screens
import { HomeScreen } from './HomeScreen';
import { PropertyListScreen } from './PropertyListScreen';
import { AuthNavigator } from './auth';
import { LoadingScreen } from './LoadingScreen';

// Import hooks and thunks
import { useAuthActions } from '../app/store/hooks';
import { useAuthInitialization } from '../app/hooks/useAuthInitialization';
import { logoutUser } from '../app/store/slices/authSlice';
// Uncomment the line below to use enhanced app initialization
// import { AppInitializer } from '../app/utils/AppInitializer';

interface Tab {
  key: string;
  title: string;
  icon: string;
}

const tabs: Tab[] = [
  { key: 'home', title: 'Home', icon: '🏠' },
  { key: 'properties', title: 'Properties', icon: '🏢' },
  { key: 'matches', title: 'Matches', icon: '❤️' },
  { key: 'messages', title: 'Messages', icon: '💬' },
  { key: 'profile', title: 'Profile', icon: '👤' },
];

export const MainAppNavigator: React.FC = () => {
  const [activeTab, setActiveTab] = useState('home');
  const [isAppReady, setIsAppReady] = useState(false);
  
  const auth = useAuthActions();
  const { isLoading: isAuthInitializing } = useAuthInitialization();

  useEffect(() => {
    // Initialize app data after auth state is loaded
    const initializeApp = async () => {
      try {
        // Only initialize app data if we're not still loading auth state
        if (!isAuthInitializing) {
          if (auth.isAuthenticated && auth.user) {
            // Load additional app data if user is authenticated
            console.log('User authenticated:', auth.user.email);
            console.log('Loading user preferences and app data...');
            
            // Option 1: Simple initialization (current)
            // TODO: Load user-specific data like:
            // - User preferences
            // - Recent searches
            // - Bookmarked properties
            // - Chat history
            // - Notifications
            
            // Option 2: Enhanced initialization (uncomment to use)
            // await AppInitializer.initializeApp(true);
          } else {
            console.log('User not authenticated, showing auth flow');
          }
          setIsAppReady(true);
        }
      } catch (error) {
        console.error('Error initializing app:', error);
        setIsAppReady(true);
      }
    };

    initializeApp();
  }, [auth.isAuthenticated, auth.user, isAuthInitializing]);

  const handleAuthSuccess = () => {
    setIsAppReady(true);
  };

  const handleLogout = async () => {
    try {
      console.log('Logging out user...');
      await auth.dispatch(logoutUser());
      console.log('User logged out successfully');
      
      // Reset app state
      setActiveTab('home');
      setIsAppReady(false);
      
      // App will automatically show auth flow since isAuthenticated will be false
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  const renderScreen = () => {
    switch (activeTab) {
      case 'home':
        return <HomeScreen />;
      case 'properties':
        return <PropertyListScreen />;
      case 'matches':
        return (
          <View className="flex-1 justify-center items-center bg-gray-50">
            <Text className="text-2xl font-bold text-gray-800 mb-4">Matches</Text>
            <Text className="text-gray-600 text-center px-6">
              Your AI-powered matches will appear here. We&apos;ll find the perfect roommates and properties for you!
            </Text>
          </View>
        );
      case 'messages':
        return (
          <View className="flex-1 justify-center items-center bg-gray-50">
            <Text className="text-2xl font-bold text-gray-800 mb-4">Messages</Text>
            <Text className="text-gray-600 text-center px-6">
              Chat with potential roommates and landlords. Your conversations will appear here.
            </Text>
          </View>
        );
      case 'profile':
        return (
          <View className="flex-1 justify-center items-center bg-gray-50">
            <Text className="text-2xl font-bold text-gray-800 mb-4">Profile</Text>
            {auth.user && (
              <View className="bg-white p-4 rounded-xl mb-6 mx-6">
                <Text className="text-lg font-semibold text-gray-800 mb-2">
                  Welcome, {auth.user.firstName} {auth.user.lastName}!
                </Text>
                <Text className="text-gray-600 mb-1">Email: {auth.user.email}</Text>
                {auth.user.phone && (
                  <Text className="text-gray-600 mb-1">Phone: {auth.user.phone}</Text>
                )}
                <Text className="text-gray-600 mb-1">Role: {auth.user.role}</Text>
                {auth.user.address && (
                  <Text className="text-gray-600 mb-1">Address: {auth.user.address}</Text>
                )}
                <Text className="text-gray-500 text-sm">
                  Member since {new Date(auth.user.createdAt || Date.now()).toLocaleDateString()}
                </Text>
              </View>
            )}
            <Text className="text-gray-600 text-center px-6 mb-8">
              Manage your profile, preferences, and account settings.
            </Text>
            <TouchableOpacity
              onPress={handleLogout}
              className="bg-red-500 px-6 py-3 rounded-xl"
            >
              <Text className="text-white font-semibold">Logout</Text>
            </TouchableOpacity>
          </View>
        );
      default:
        return <HomeScreen />;
    }
  };

  if (isAuthInitializing) {
    return <LoadingScreen message="Restoring your session..." />;
  }

  if (!isAppReady) {
    return <LoadingScreen message="Preparing your experience..." />;
  }

  // Show auth flow if user is not authenticated
  if (!auth.isAuthenticated) {
    return <AuthNavigator onAuthSuccess={handleAuthSuccess} />;
  }

  return (
    <SafeAreaView className="flex-1 bg-white">
      <StatusBar style="auto" />
      
      {/* Main Content */}
      <View className="flex-1">
        {renderScreen()}
      </View>

      {/* Bottom Tab Navigation */}
      <View className="bg-white border-t border-gray-200 px-4 py-2">
        <View className="flex-row">
          {tabs.map((tab) => (
            <TouchableOpacity
              key={tab.key}
              onPress={() => setActiveTab(tab.key)}
              className={`flex-1 items-center py-3 rounded-xl mx-1 ${
                activeTab === tab.key
                  ? 'bg-blue-50'
                  : 'bg-transparent'
              }`}
            >
              <Text className="text-2xl mb-1">{tab.icon}</Text>
              <Text
                className={`text-xs font-medium ${
                  activeTab === tab.key
                    ? 'text-blue-600'
                    : 'text-gray-500'
                }`}
              >
                {tab.title}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>
    </SafeAreaView>
  );
};

export default MainAppNavigator;
